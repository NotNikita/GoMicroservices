volumes:
  postgres_data:
  mongo_data:
  rabbitmq_data:
  rabbitmq_logs:

services:
  broker-service:
    build: ./broker-service/
    ports:
      - "8080:8080"
    restart: always
    deploy:
      mode: replicated
      replicas: 1

  listener-service:
    build: ./listener-service/
    ports:
      - "6060:6060"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    depends_on:
      rabbitmq:
        condition: service_healthy
        restart: true

  auth-service:
    build: ./auth-service/
    ports:
      - "9090:9090"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_DB_URL: "postgres://postgres:password@postgres:5432/postgres?sslmode=disable"
    depends_on:
      postgres:
        condition: service_healthy
        restart: true

  logger-service:
    build: ./logger-service/
    ports:
      - "7070:7070"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      MONGO_URL: "mongodb://root:example@mongo:27017/udemy_logs?authSource=admin"
    depends_on:
      mongo:
        condition: service_healthy
        restart: true

  frontend:
    build: ./frontend/
    ports:
      - "3000:3000"

  postgres:
    image: postgres:17.2
    container_name: postgres
    build:
      context: ./database/postgres
      dockerfile: Dockerfile
    environment:
      POSTGRES_DB: "postgres"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "password"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: "3"
          memory: 10G

  mongo:
    image: mongo:latest
    container_name: mongo
    build:
      context: ./database/mongo
      dockerfile: Dockerfile
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: udemy_logs
    volumes:
      - mongo_data:/data/db
      - ./database/mongo/init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: "3"
          memory: 10G

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: "rabbitmq"
    ports:
      - 5672:5672
      - 15672:15672
    restart: unless-stopped
    deploy:
      mode: replicated
      replicas: 1
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
